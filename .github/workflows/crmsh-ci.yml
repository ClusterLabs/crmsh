# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions
# For more information about secrets see: https://docs.github.com/en/free-pro-team@latest/actions/reference/encrypted-secrets

name: crmsh CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  DOCKER_SCRIPT: ./test/docker_scripts.sh
  FOLDER: /package
  PACKAGE_NAME: crmsh
  OBS_USER: ${{ secrets.OBS_USER }}
  OBS_PASS: ${{ secrets.OBS_PASS }}
  OBS_PROJECT: ${{ secrets.OBS_PROJECT }}
  TARGET_PROJECT: ${{ secrets.TARGET_PROJECT }}

jobs:
  unit_test:
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install tox
    - name: Test with pytest in tox
      run: |
        tox -v

  functional_test_hb_report_bugs:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for hb_report
      run:  |
        $DOCKER_SCRIPT hb_report before_install
        $DOCKER_SCRIPT hb_report run bugs

  functional_test_bootstrap_bugs:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for bootstrap bugs
      run:  |
        $DOCKER_SCRIPT bootstrap before_install
        $DOCKER_SCRIPT bootstrap run bugs

  functional_test_bootstrap_common:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for bootstrap common
      run:  |
        $DOCKER_SCRIPT bootstrap before_install
        $DOCKER_SCRIPT bootstrap run init_join_remove

  functional_test_bootstrap_options:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for bootstrap options
      run:  |
        $DOCKER_SCRIPT bootstrap before_install
        $DOCKER_SCRIPT bootstrap run options

  functional_test_qdevice_setup_remove:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for qdevice setup and remove
      run:  |
        $DOCKER_SCRIPT qdevice before_install
        $DOCKER_SCRIPT qdevice run setup_remove

  functional_test_qdevice_options:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for qdevice options
      run:  |
        $DOCKER_SCRIPT qdevice before_install
        $DOCKER_SCRIPT qdevice run options

  functional_test_qdevice_validate:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for qdevice validate
      run:  |
        $DOCKER_SCRIPT qdevice before_install
        $DOCKER_SCRIPT qdevice run validate

  functional_test_qdevice_user_case:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for qdevice user case
      run:  |
        $DOCKER_SCRIPT qdevice before_install
        $DOCKER_SCRIPT qdevice run usercase

  functional_test_resource_subcommand:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for resource subcommand
      run:  |
        $DOCKER_SCRIPT resource before_install
        $DOCKER_SCRIPT resource run

  functional_test_configure_sublevel:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for configure sublevel bugs
      run:  |
        $DOCKER_SCRIPT configure before_install
        $DOCKER_SCRIPT configure run bugs

  functional_test_constraints_bugs:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for constraints bugs
      run:  |
        $DOCKER_SCRIPT constraints before_install
        $DOCKER_SCRIPT constraints run bugs

  functional_test_geo_cluster:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: functional test for geo cluster
      run:  |
        $DOCKER_SCRIPT geo before_install
        $DOCKER_SCRIPT geo run setup

  original_regression_test:
    runs-on: ubuntu-latest
    timeout-minutes: 40
    steps:
    - uses: actions/checkout@v2
    - name: original regression test
      run:  |
        $DOCKER_SCRIPT original before_install
        $DOCKER_SCRIPT original run

  delivery:
    needs: [unit_test,
      functional_test_hb_report_bugs,
      functional_test_bootstrap_bugs,
      functional_test_bootstrap_common,
      functional_test_bootstrap_options,
      functional_test_qdevice_setup_remove,
      functional_test_qdevice_options,
      functional_test_qdevice_validate,
      functional_test_qdevice_user_case,
      functional_test_resource_subcommand,
      functional_test_configure_sublevel,
      functional_test_constraints_bugs,
      functional_test_geo_cluster,
      original_regression_test]
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: delivery process
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        docker pull shap/continuous_deliver:latest
        docker run -t -v "$(pwd):/package" \
          -e OBS_USER=$OBS_USER \
          -e OBS_PASS=$OBS_PASS \
          -e FOLDER=$FOLDER \
          -e OBS_PROJECT=$OBS_PROJECT \
          -e PACKAGE_NAME=$PACKAGE_NAME \
          shap/continuous_deliver \
          /bin/bash -c "cd /package;/scripts/upload.sh"

  submit:
    needs: delivery
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
    - uses: actions/checkout@v2
    - name: submit process
      if: github.ref == 'refs/heads/master' && github.event_name == 'push'
      run: |
        docker pull shap/continuous_deliver:latest
        docker run -t -v "$(pwd):/package" \
          -e OBS_USER=$OBS_USER \
          -e OBS_PASS=$OBS_PASS \
          -e OBS_PROJECT=$OBS_PROJECT \
          -e PACKAGE_NAME=$PACKAGE_NAME \
          -e TARGET_PROJECT=$TARGET_PROJECT \
          shap/continuous_deliver \
          /bin/bash -c "cd /package;/scripts/submit.sh"
